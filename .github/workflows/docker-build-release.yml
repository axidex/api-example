name: Build Go Service Docker Image (Reusable)

on:
  workflow_call:
    inputs:
      service_dir:
        required: true
        type: string
        description: 'Service directory name (server/transactions)'
      docker_image_name:
        required: true
        type: string
        description: 'Docker image name (api-example-server/api-example-transactions)'
      create_tag:
        required: false
        type: boolean
        default: false
        description: 'Create and push git tag after successful build'
      tag_prefix:
        required: false
        type: string
        default: 'v'
        description: 'Prefix for git tag (e.g., "v" for v1.0.0)'

    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.service_dir }}

    outputs:
      version: ${{ steps.validate-semver.outputs.VERSION }}
      should_tag: ${{ steps.validate-semver.outputs.SHOULD_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate semantic version
        id: validate-semver
        run: |
          if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            REF_TYPE="tag"
            SHOULD_TAG="false"  # Already a tag
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          
            if [[ "$BRANCH_NAME" =~ ^release/([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?(\+[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              REF_TYPE="release-branch"
              SHOULD_TAG="${{ inputs.create_tag }}"
            elif [[ "$BRANCH_NAME" =~ ^release/ ]]; then
              echo "❌ Error: Branch '$BRANCH_NAME' has invalid semantic version"
              echo "Expected format: release/X.Y.Z, release/X.Y.Z-prerelease, or release/X.Y.Z+build"
              exit 1
            else
              echo "❌ Error: Branch '$BRANCH_NAME' is not a release branch with semantic version"
              echo "Only tags and release/ branches with valid semver are allowed"
              exit 1
            fi
          fi
          
          # Validate semver format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?(\+[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
            echo "❌ Error: '$VERSION' is not a valid semantic version"
            echo "Expected format: X.Y.Z, X.Y.Z-prerelease, or X.Y.Z+build"
            exit 1
          fi
          
          echo "✅ Valid semantic version: $VERSION (from $REF_TYPE)"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "SHOULD_TAG=$SHOULD_TAG" >> $GITHUB_OUTPUT

      - name: Compute build arguments
        id: build-vars
        run: |
          echo "BUILD_DATE=$(date -u +'%d.%m.%Y')" >> $GITHUB_OUTPUT
          echo "BUILD_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=${{ steps.validate-semver.outputs.VERSION }}" >> $GITHUB_OUTPUT

      - name: Version
        run: echo "${{ steps.build-vars.outputs.BUILD_VERSION }} ${{ steps.build-vars.outputs.BUILD_DATE }} ${{ steps.build-vars.outputs.BUILD_COMMIT }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ inputs.service_dir }}
          file: ./${{ inputs.service_dir }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ inputs.docker_image_name }}:${{ steps.build-vars.outputs.BUILD_VERSION }}
          build-args: |
            BUILD_VERSION=${{ steps.build-vars.outputs.BUILD_VERSION }}
            BUILD_DATE=${{ steps.build-vars.outputs.BUILD_DATE }}
            BUILD_COMMIT=${{ steps.build-vars.outputs.BUILD_COMMIT }}

  create-tag:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.should_tag == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Use a token with write permissions for tagging
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check if tag exists
        id: check-tag
        run: |
          TAG_NAME="${{ inputs.tag_prefix }}${{ needs.build.outputs.version }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "⚠️ Tag $TAG_NAME already exists, skipping tag creation"
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Tag $TAG_NAME does not exist, will create it"
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check-tag.outputs.TAG_EXISTS == 'false'
        run: |
          TAG_NAME="${{ steps.check-tag.outputs.TAG_NAME }}"
          VERSION="${{ needs.build.outputs.version }}"
          
          echo "🏷️ Creating tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release $VERSION"
          
          echo "📤 Pushing tag to repository"
          git push origin "$TAG_NAME"
          
          echo "✅ Successfully created and pushed tag: $TAG_NAME"

      - name: Tag creation summary
        run: |
          if [[ "${{ steps.check-tag.outputs.TAG_EXISTS }}" == "true" ]]; then
            echo "🔄 Tag ${{ inputs.tag_prefix }}${{ needs.build.outputs.version }} already exists"
          else
            echo "🎉 Created new tag: ${{ steps.check-tag.outputs.TAG_NAME }}"
          fi